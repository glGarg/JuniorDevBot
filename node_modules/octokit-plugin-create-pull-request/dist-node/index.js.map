{"version":3,"file":"index.js","sources":["../dist-src/value-to-tree-object.js","../dist-src/constants.js","../dist-src/create-tree.js","../dist-src/create-commit.js","../dist-src/compose-create-pull-request.js","../dist-src/version.js","../dist-src/index.js"],"sourcesContent":["export async function valueToTreeObject(octokit, owner, repo, path, value) {\n    let mode = \"100644\";\n    if (value !== null && typeof value !== \"string\") {\n        mode = value.mode || mode;\n    }\n    // Text files can be changed through the .content key\n    if (typeof value === \"string\") {\n        return {\n            path,\n            mode: mode,\n            content: value,\n        };\n    }\n    // Binary files need to be created first using the git blob API,\n    // then changed by referencing in the .sha key\n    const { data } = await octokit.request(\"POST /repos/{owner}/{repo}/git/blobs\", {\n        owner,\n        repo,\n        ...value,\n    });\n    const blobSha = data.sha;\n    return {\n        path,\n        mode: mode,\n        sha: blobSha,\n    };\n}\n","export const DELETE_FILE = Symbol(\"DELETE_FILE\");\n","import { valueToTreeObject } from \"./value-to-tree-object\";\nimport { DELETE_FILE } from \"./constants\";\nexport async function createTree(state, changes) {\n    const { octokit, owner, repo, ownerOrFork, latestCommitSha, latestCommitTreeSha, } = state;\n    let tree = [];\n    for (const path of Object.keys(changes.files)) {\n        const value = changes.files[path];\n        if (value === DELETE_FILE) {\n            // Deleting a non-existent file from a tree leads to an \"GitRPC::BadObjectState\" error,\n            // so we only attempt to delete the file if it exists.\n            try {\n                // https://developer.github.com/v3/repos/contents/#get-contents\n                await octokit.request(\"HEAD /repos/{owner}/{repo}/contents/:path\", {\n                    owner: ownerOrFork,\n                    repo,\n                    ref: latestCommitSha,\n                    path,\n                });\n                tree.push({\n                    path,\n                    mode: \"100644\",\n                    sha: null,\n                });\n                continue;\n            }\n            catch (error) {\n                continue;\n            }\n        }\n        // When passed a function, retrieve the content of the file, pass it\n        // to the function, then return the result\n        if (typeof value === \"function\") {\n            let result;\n            try {\n                const { data: file } = await octokit.request(\"GET /repos/{owner}/{repo}/contents/:path\", {\n                    owner: ownerOrFork,\n                    repo,\n                    ref: latestCommitSha,\n                    path,\n                });\n                result = await value(Object.assign(file, { exists: true }));\n                if (result === DELETE_FILE) {\n                    try {\n                        // https://developer.github.com/v3/repos/contents/#get-contents\n                        await octokit.request(\"HEAD /repos/{owner}/{repo}/contents/:path\", {\n                            owner: ownerOrFork,\n                            repo,\n                            ref: latestCommitSha,\n                            path,\n                        });\n                        tree.push({\n                            path,\n                            mode: \"100644\",\n                            sha: null,\n                        });\n                        continue;\n                    }\n                    catch (error) {\n                        // istanbul ignore next\n                        continue;\n                    }\n                }\n            }\n            catch (error) {\n                // @ts-ignore\n                // istanbul ignore if\n                if (error.status !== 404)\n                    throw error;\n                // @ts-ignore\n                result = await value({ exists: false });\n            }\n            if (result === null ||\n                typeof result === \"undefined\" ||\n                typeof result === \"symbol\") {\n                continue;\n            }\n            tree.push(\n            // @ts-expect-error - Argument result can never be of type Symbol at this branch\n            // because the above condition will catch it and move on to the next iteration cycle\n            await valueToTreeObject(octokit, ownerOrFork, repo, path, result));\n            continue;\n        }\n        // @ts-expect-error - Argument value can never be of type Symbol at this branch\n        // because the above condition will catch it and initiate a file deletion operation\n        tree.push(await valueToTreeObject(octokit, ownerOrFork, repo, path, value));\n        continue;\n    }\n    tree = tree.filter(Boolean);\n    if (tree.length === 0) {\n        return null;\n    }\n    // https://developer.github.com/v3/git/trees/#create-a-tree\n    const { data: { sha: newTreeSha }, } = await octokit.request(\"POST /repos/{owner}/{repo}/git/trees\", {\n        owner: ownerOrFork,\n        repo,\n        base_tree: latestCommitTreeSha,\n        tree,\n    });\n    return newTreeSha;\n}\n","export async function createCommit(state, treeCreated, changes) {\n    const { octokit, repo, ownerOrFork, latestCommitSha } = state;\n    const message = treeCreated\n        ? changes.commit\n        : typeof changes.emptyCommit === \"string\"\n            ? changes.emptyCommit\n            : changes.commit;\n    const commit = {\n        message,\n        author: changes.author,\n        committer: changes.committer,\n        tree: state.latestCommitTreeSha,\n        parents: [latestCommitSha],\n    };\n    // https://developer.github.com/v3/git/commits/#create-a-commit\n    const { data: latestCommit } = await octokit.request(\"POST /repos/{owner}/{repo}/git/commits\", {\n        owner: ownerOrFork,\n        repo,\n        ...commit,\n        signature: changes.signature\n            ? await changes.signature(commit)\n            : undefined,\n    });\n    return latestCommit.sha;\n}\n","import { createTree } from \"./create-tree\";\nimport { createCommit } from \"./create-commit\";\nexport async function composeCreatePullRequest(octokit, { owner, repo, title, body, base, head, createWhenEmpty, changes: changesOption, draft = false, forceFork = false, update = false, }) {\n    if (head === base) {\n        throw new Error('[octokit-plugin-create-pull-request] \"head\" cannot be the same value as \"base\"');\n    }\n    const changes = Array.isArray(changesOption)\n        ? changesOption\n        : [changesOption];\n    if (changes.length === 0)\n        throw new Error('[octokit-plugin-create-pull-request] \"changes\" cannot be an empty array');\n    const state = { octokit, owner, repo };\n    // https://developer.github.com/v3/repos/#get-a-repository\n    const { data: repository, headers } = await octokit.request(\"GET /repos/{owner}/{repo}\", {\n        owner,\n        repo,\n    });\n    const isUser = !!headers[\"x-oauth-scopes\"];\n    if (!repository.permissions) {\n        throw new Error(\"[octokit-plugin-create-pull-request] Missing authentication\");\n    }\n    if (!base) {\n        base = repository.default_branch;\n    }\n    state.ownerOrFork = owner;\n    if (forceFork || (isUser && !repository.permissions.push)) {\n        // https://developer.github.com/v3/users/#get-the-authenticated-user\n        const user = await octokit.request(\"GET /user\");\n        // https://developer.github.com/v3/repos/forks/#list-forks\n        const forks = await octokit.request(\"GET /repos/{owner}/{repo}/forks\", {\n            owner,\n            repo,\n        });\n        const hasFork = forks.data.find(\n        /* istanbul ignore next - fork owner can be null, but we don't test that */\n        (fork) => fork.owner && fork.owner.login === user.data.login);\n        if (!hasFork) {\n            // https://developer.github.com/v3/repos/forks/#create-a-fork\n            await octokit.request(\"POST /repos/{owner}/{repo}/forks\", {\n                owner,\n                repo,\n            });\n        }\n        state.ownerOrFork = user.data.login;\n    }\n    // https://developer.github.com/v3/repos/commits/#list-commits-on-a-repository\n    const { data: [latestCommit], } = await octokit.request(\"GET /repos/{owner}/{repo}/commits\", {\n        owner,\n        repo,\n        sha: base,\n        per_page: 1,\n    });\n    state.latestCommitSha = latestCommit.sha;\n    state.latestCommitTreeSha = latestCommit.commit.tree.sha;\n    const baseCommitTreeSha = latestCommit.commit.tree.sha;\n    for (const change of changes) {\n        let treeCreated = false;\n        if (change.files && Object.keys(change.files).length) {\n            const latestCommitTreeSha = await createTree(state, change);\n            if (latestCommitTreeSha) {\n                state.latestCommitTreeSha = latestCommitTreeSha;\n                treeCreated = true;\n            }\n        }\n        if (treeCreated || change.emptyCommit !== false) {\n            state.latestCommitSha = await createCommit(state, treeCreated, change);\n        }\n    }\n    const hasNoChanges = baseCommitTreeSha === state.latestCommitTreeSha;\n    if (hasNoChanges && createWhenEmpty === false) {\n        return null;\n    }\n    const branchInfo = await octokit.graphql(`\n    query ($owner: String!, $repo: String!, $head: String!) {\n      repository(name: $repo, owner: $owner) {\n        ref(qualifiedName: $head) {\n          associatedPullRequests(first: 1, states: OPEN) {\n            edges {\n              node {\n                id\n                number\n                url\n              }\n            }\n          }\n        }\n      }\n    }`, {\n        owner: state.ownerOrFork,\n        repo,\n        head,\n    });\n    const branchExists = !!branchInfo.repository.ref;\n    const existingPullRequest = branchInfo.repository.ref?.associatedPullRequests?.edges?.[0]?.node;\n    if (existingPullRequest && !update) {\n        throw new Error(`[octokit-plugin-create-pull-request] Pull request already exists: ${existingPullRequest.url}. Set update=true to enable updating`);\n    }\n    if (branchExists) {\n        // https://docs.github.com/en/rest/git/refs#update-a-reference\n        await octokit.request(\"PATCH /repos/{owner}/{repo}/git/refs/{ref}\", {\n            owner: state.ownerOrFork,\n            repo,\n            sha: state.latestCommitSha,\n            ref: `heads/${head}`,\n            force: true,\n        });\n    }\n    else {\n        // https://developer.github.com/v3/git/refs/#create-a-reference\n        await octokit.request(\"POST /repos/{owner}/{repo}/git/refs\", {\n            owner: state.ownerOrFork,\n            repo,\n            sha: state.latestCommitSha,\n            ref: `refs/heads/${head}`,\n        });\n    }\n    const pullRequestOptions = {\n        owner,\n        repo,\n        head: `${state.ownerOrFork}:${head}`,\n        base,\n        title,\n        body,\n        draft,\n    };\n    if (existingPullRequest) {\n        // https://docs.github.com/en/rest/pulls/pulls#update-a-pull-request\n        return await octokit.request(\"PATCH /repos/{owner}/{repo}/pulls/{pull_number}\", {\n            pull_number: existingPullRequest.number,\n            ...pullRequestOptions,\n        });\n    }\n    else {\n        // https://developer.github.com/v3/pulls/#create-a-pull-request\n        return await octokit.request(\"POST /repos/{owner}/{repo}/pulls\", pullRequestOptions);\n    }\n}\n","export const VERSION = \"5.0.0\";\n","import { composeCreatePullRequest } from \"./compose-create-pull-request\";\nimport { VERSION } from \"./version\";\nexport { DELETE_FILE } from \"./constants\";\n/**\n * @param octokit Octokit instance\n */\nexport function createPullRequest(octokit) {\n    return {\n        createPullRequest: composeCreatePullRequest.bind(null, octokit),\n    };\n}\nexport { composeCreatePullRequest } from \"./compose-create-pull-request\";\ncreatePullRequest.VERSION = VERSION;\n"],"names":["valueToTreeObject","octokit","owner","repo","path","value","mode","content","data","request","blobSha","sha","DELETE_FILE","Symbol","createTree","state","changes","ownerOrFork","latestCommitSha","latestCommitTreeSha","tree","Object","keys","files","ref","push","error","result","file","assign","exists","status","filter","Boolean","length","newTreeSha","base_tree","createCommit","treeCreated","message","commit","emptyCommit","author","committer","parents","latestCommit","signature","undefined","composeCreatePullRequest","title","body","base","head","createWhenEmpty","changesOption","draft","forceFork","update","Error","Array","isArray","repository","headers","isUser","permissions","default_branch","user","forks","hasFork","find","fork","login","per_page","baseCommitTreeSha","change","hasNoChanges","branchInfo","graphql","branchExists","existingPullRequest","associatedPullRequests","edges","node","url","force","pullRequestOptions","pull_number","number","VERSION","createPullRequest","bind"],"mappings":"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"}